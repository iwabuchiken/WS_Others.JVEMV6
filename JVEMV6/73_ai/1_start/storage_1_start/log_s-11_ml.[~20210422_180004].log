 
============================  

[s_11_ml.py:135] starting : test_1 (time=20210421_163341)

[s_11_ml.py:163] exec_prog => done

[s_11_ml.py:198] all done
 
============================  
 
============================  
[s_11_ml.py:90] import load_iris => done

[s_11_ml.py:142] starting : test_1 (time=20210421_163627)

[s_11_ml.py:170] exec_prog => done

[s_11_ml.py:205] all done
 
============================  
[s_11_ml.py:96] sklerarn-related imports => done

[s_11_ml.py:148] starting : test_1 (time=20210421_163918)

[s_11_ml.py:176] exec_prog => done

[s_11_ml.py:211] all done
 
============================  
[s_11_ml.py:96] sklerarn-related imports => done

[s_11_ml.py:148] starting : test_1 (time=20210421_164215)

[s_11_ml.py:165] load_iris => done
{'target_names': array(['setosa', 'versicolor', 'virginica'],
      dtype='<U10'), 'target': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 'data': array([[ 5.1,  3.5,  1.4,  0.2],
       [ 4.9,  3. ,  1.4,  0.2],
       [ 4.7,  3.2,  1.3,  0.2],
       [ 4.6,  3.1,  1.5,  0.2],
       [ 5. ,  3.6,  1.4,  0.2],
       [ 5.4,  3.9,  1.7,  0.4],
       [ 4.6,  3.4,  1.4,  0.3],
       [ 5. ,  3.4,  1.5,  0.2],
       [ 4.4,  2.9,  1.4,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 5.4,  3.7,  1.5,  0.2],
       [ 4.8,  3.4,  1.6,  0.2],
       [ 4.8,  3. ,  1.4,  0.1],
       [ 4.3,  3. ,  1.1,  0.1],
       [ 5.8,  4. ,  1.2,  0.2],
       [ 5.7,  4.4,  1.5,  0.4],
       [ 5.4,  3.9,  1.3,  0.4],
       [ 5.1,  3.5,  1.4,  0.3],
       [ 5.7,  3.8,  1.7,  0.3],
       [ 5.1,  3.8,  1.5,  0.3],
       [ 5.4,  3.4,  1.7,  0.2],
       [ 5.1,  3.7,  1.5,  0.4],
       [ 4.6,  3.6,  1. ,  0.2],
       [ 5.1,  3.3,  1.7,  0.5],
       [ 4.8,  3.4,  1.9,  0.2],
       [ 5. ,  3. ,  1.6,  0.2],
       [ 5. ,  3.4,  1.6,  0.4],
       [ 5.2,  3.5,  1.5,  0.2],
       [ 5.2,  3.4,  1.4,  0.2],
       [ 4.7,  3.2,  1.6,  0.2],
       [ 4.8,  3.1,  1.6,  0.2],
       [ 5.4,  3.4,  1.5,  0.4],
       [ 5.2,  4.1,  1.5,  0.1],
       [ 5.5,  4.2,  1.4,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 5. ,  3.2,  1.2,  0.2],
       [ 5.5,  3.5,  1.3,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 4.4,  3. ,  1.3,  0.2],
       [ 5.1,  3.4,  1.5,  0.2],
       [ 5. ,  3.5,  1.3,  0.3],
       [ 4.5,  2.3,  1.3,  0.3],
       [ 4.4,  3.2,  1.3,  0.2],
       [ 5. ,  3.5,  1.6,  0.6],
       [ 5.1,  3.8,  1.9,  0.4],
       [ 4.8,  3. ,  1.4,  0.3],
       [ 5.1,  3.8,  1.6,  0.2],
       [ 4.6,  3.2,  1.4,  0.2],
       [ 5.3,  3.7,  1.5,  0.2],
       [ 5. ,  3.3,  1.4,  0.2],
       [ 7. ,  3.2,  4.7,  1.4],
       [ 6.4,  3.2,  4.5,  1.5],
       [ 6.9,  3.1,  4.9,  1.5],
       [ 5.5,  2.3,  4. ,  1.3],
       [ 6.5,  2.8,  4.6,  1.5],
       [ 5.7,  2.8,  4.5,  1.3],
       [ 6.3,  3.3,  4.7,  1.6],
       [ 4.9,  2.4,  3.3,  1. ],
       [ 6.6,  2.9,  4.6,  1.3],
       [ 5.2,  2.7,  3.9,  1.4],
       [ 5. ,  2. ,  3.5,  1. ],
       [ 5.9,  3. ,  4.2,  1.5],
       [ 6. ,  2.2,  4. ,  1. ],
       [ 6.1,  2.9,  4.7,  1.4],
       [ 5.6,  2.9,  3.6,  1.3],
       [ 6.7,  3.1,  4.4,  1.4],
       [ 5.6,  3. ,  4.5,  1.5],
       [ 5.8,  2.7,  4.1,  1. ],
       [ 6.2,  2.2,  4.5,  1.5],
       [ 5.6,  2.5,  3.9,  1.1],
       [ 5.9,  3.2,  4.8,  1.8],
       [ 6.1,  2.8,  4. ,  1.3],
       [ 6.3,  2.5,  4.9,  1.5],
       [ 6.1,  2.8,  4.7,  1.2],
       [ 6.4,  2.9,  4.3,  1.3],
       [ 6.6,  3. ,  4.4,  1.4],
       [ 6.8,  2.8,  4.8,  1.4],
       [ 6.7,  3. ,  5. ,  1.7],
       [ 6. ,  2.9,  4.5,  1.5],
       [ 5.7,  2.6,  3.5,  1. ],
       [ 5.5,  2.4,  3.8,  1.1],
       [ 5.5,  2.4,  3.7,  1. ],
       [ 5.8,  2.7,  3.9,  1.2],
       [ 6. ,  2.7,  5.1,  1.6],
       [ 5.4,  3. ,  4.5,  1.5],
       [ 6. ,  3.4,  4.5,  1.6],
       [ 6.7,  3.1,  4.7,  1.5],
       [ 6.3,  2.3,  4.4,  1.3],
       [ 5.6,  3. ,  4.1,  1.3],
       [ 5.5,  2.5,  4. ,  1.3],
       [ 5.5,  2.6,  4.4,  1.2],
       [ 6.1,  3. ,  4.6,  1.4],
       [ 5.8,  2.6,  4. ,  1.2],
       [ 5. ,  2.3,  3.3,  1. ],
       [ 5.6,  2.7,  4.2,  1.3],
       [ 5.7,  3. ,  4.2,  1.2],
       [ 5.7,  2.9,  4.2,  1.3],
       [ 6.2,  2.9,  4.3,  1.3],
       [ 5.1,  2.5,  3. ,  1.1],
       [ 5.7,  2.8,  4.1,  1.3],
       [ 6.3,  3.3,  6. ,  2.5],
       [ 5.8,  2.7,  5.1,  1.9],
       [ 7.1,  3. ,  5.9,  2.1],
       [ 6.3,  2.9,  5.6,  1.8],
       [ 6.5,  3. ,  5.8,  2.2],
       [ 7.6,  3. ,  6.6,  2.1],
       [ 4.9,  2.5,  4.5,  1.7],
       [ 7.3,  2.9,  6.3,  1.8],
       [ 6.7,  2.5,  5.8,  1.8],
       [ 7.2,  3.6,  6.1,  2.5],
       [ 6.5,  3.2,  5.1,  2. ],
       [ 6.4,  2.7,  5.3,  1.9],
       [ 6.8,  3. ,  5.5,  2.1],
       [ 5.7,  2.5,  5. ,  2. ],
       [ 5.8,  2.8,  5.1,  2.4],
       [ 6.4,  3.2,  5.3,  2.3],
       [ 6.5,  3. ,  5.5,  1.8],
       [ 7.7,  3.8,  6.7,  2.2],
       [ 7.7,  2.6,  6.9,  2.3],
       [ 6. ,  2.2,  5. ,  1.5],
       [ 6.9,  3.2,  5.7,  2.3],
       [ 5.6,  2.8,  4.9,  2. ],
       [ 7.7,  2.8,  6.7,  2. ],
       [ 6.3,  2.7,  4.9,  1.8],
       [ 6.7,  3.3,  5.7,  2.1],
       [ 7.2,  3.2,  6. ,  1.8],
       [ 6.2,  2.8,  4.8,  1.8],
       [ 6.1,  3. ,  4.9,  1.8],
       [ 6.4,  2.8,  5.6,  2.1],
       [ 7.2,  3. ,  5.8,  1.6],
       [ 7.4,  2.8,  6.1,  1.9],
       [ 7.9,  3.8,  6.4,  2. ],
       [ 6.4,  2.8,  5.6,  2.2],
       [ 6.3,  2.8,  5.1,  1.5],
       [ 6.1,  2.6,  5.6,  1.4],
       [ 7.7,  3. ,  6.1,  2.3],
       [ 6.3,  3.4,  5.6,  2.4],
       [ 6.4,  3.1,  5.5,  1.8],
       [ 6. ,  3. ,  4.8,  1.8],
       [ 6.9,  3.1,  5.4,  2.1],
       [ 6.7,  3.1,  5.6,  2.4],
       [ 6.9,  3.1,  5.1,  2.3],
       [ 5.8,  2.7,  5.1,  1.9],
       [ 6.8,  3.2,  5.9,  2.3],
       [ 6.7,  3.3,  5.7,  2.5],
       [ 6.7,  3. ,  5.2,  2.3],
       [ 6.3,  2.5,  5. ,  1.9],
       [ 6.5,  3. ,  5.2,  2. ],
       [ 6.2,  3.4,  5.4,  2.3],
       [ 5.9,  3. ,  5.1,  1.8]]), 'DESCR': 'Iris Plants Database\n====================\n\nNotes\n-----\nData Set Characteristics:\n    :Number of Instances: 150 (50 in each of three classes)\n    :Number of Attributes: 4 numeric, predictive attributes and the class\n    :Attribute Information:\n        - sepal length in cm\n        - sepal width in cm\n        - petal length in cm\n        - petal width in cm\n        - class:\n                - Iris-Setosa\n                - Iris-Versicolour\n                - Iris-Virginica\n    :Summary Statistics:\n\n    ============== ==== ==== ======= ===== ====================\n                    Min  Max   Mean    SD   Class Correlation\n    ============== ==== ==== ======= ===== ====================\n    sepal length:   4.3  7.9   5.84   0.83    0.7826\n    sepal width:    2.0  4.4   3.05   0.43   -0.4194\n    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\n    petal width:    0.1  2.5   1.20  0.76     0.9565  (high!)\n    ============== ==== ==== ======= ===== ====================\n\n    :Missing Attribute Values: None\n    :Class Distribution: 33.3% for each of 3 classes.\n    :Creator: R.A. Fisher\n    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\n    :Date: July, 1988\n\nThis is a copy of UCI ML iris datasets.\nhttp://archive.ics.uci.edu/ml/datasets/Iris\n\nThe famous Iris database, first used by Sir R.A Fisher\n\nThis is perhaps the best known database to be found in the\npattern recognition literature.  Fisher\'s paper is a classic in the field and\nis referenced frequently to this day.  (See Duda & Hart, for example.)  The\ndata set contains 3 classes of 50 instances each, where each class refers to a\ntype of iris plant.  One class is linearly separable from the other 2; the\nlatter are NOT linearly separable from each other.\n\nReferences\n----------\n   - Fisher,R.A. "The use of multiple measurements in taxonomic problems"\n     Annual Eugenics, 7, Part II, 179-188 (1936); also in "Contributions to\n     Mathematical Statistics" (John Wiley, NY, 1950).\n   - Duda,R.O., & Hart,P.E. (1973) Pattern Classification and Scene Analysis.\n     (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\n   - Dasarathy, B.V. (1980) "Nosing Around the Neighborhood: A New System\n     Structure and Classification Rule for Recognition in Partially Exposed\n     Environments".  IEEE Transactions on Pattern Analysis and Machine\n     Intelligence, Vol. PAMI-2, No. 1, 67-71.\n   - Gates, G.W. (1972) "The Reduced Nearest Neighbor Rule".  IEEE Transactions\n     on Information Theory, May 1972, 431-433.\n   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al"s AUTOCLASS II\n     conceptual clustering system finds 3 classes in the data.\n   - Many, many more ...\n', 'feature_names': ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']}
[s_11_ml.py:187] exec_prog => done

[s_11_ml.py:222] all done
 
============================  
[s_11_ml.py:96] sklerarn-related imports => done

[s_11_ml.py:148] starting : test_1 (time=20210421_164423)

[s_11_ml.py:165] load_iris => done
iris_dataset['DESCR'] ==>
Iris Plants Database
====================

Notes
-----
Data Set Characteristics:
    :Number of Instances: 150 (50 in each of three classes)
    :Number of Attributes: 4 numeric, predictive attributes and the class
    :Attribute Information:
        - sepal length in cm
        - sepal width in cm
        - petal length in cm
        - petal width in cm
        - class:
                - Iris-Setosa
                - Iris-Versicolour
                - Iris-Virginica
    :Summary Statistics:

    ============== ==== ==== ======= ===== ====================
                    Min  Max   Mean    SD   Class Correlation
    ============== ==== ==== ======= ===== ====================
    sepal length:   4.3  7.9   5.84   0.83    0.7826
    sepal width:    2.0  4.4   3.05   0.43   -0.4194
    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)
    petal width:    0.1  2.5   1.20  0.76     0.9565  (high!)
    ============== ==== ==== ======= ===== ====================

    :Missing Attribute Values: None
    :Class Distribution: 33.3% for each of 3 classes.
    :Creator: R.A. Fisher
    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)
    :Date: July, 1988

This is a copy of UCI ML iris datasets.
http://archive.ics.uci.edu/ml/datasets/Iris

The famous Iris database, first used by Sir R.A Fisher

This is perhaps the best known database to be found in the
pattern recognition literature.  Fisher's paper is a classic in the field and
is referenced frequently to this day.  (See Duda & Hart, for example.)  The
data set contains 3 classes of 50 instances each, where each class refers to a
type of iris plant.  One class is linearly separable from the other 2; the
latter are NOT linearly separable from each other.

References
----------
   - Fisher,R.A. "The use of multiple measurements in taxonomic problems"
     Annual Eugenics, 7, Part II, 179-188 (1936); also in "Contributions to
     Mathematical Statistics" (John Wiley, NY, 1950).
   - Duda,R.O., & Hart,P.E. (1973) Pattern Classification and Scene Analysis.
     (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.
   - Dasarathy, B.V. (1980) "Nosing Around the Neighborhood: A New System
     Structure and Classification Rule for Recognition in Partially Exposed
     Environments".  IEEE Transactions on Pattern Analysis and Machine
     Intelligence, Vol. PAMI-2, No. 1, 67-71.
   - Gates, G.W. (1972) "The Reduced Nearest Neighbor Rule".  IEEE Transactions
     on Information Theory, May 1972, 431-433.
   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al"s AUTOCLASS II
     conceptual clustering system finds 3 classes in the data.
   - Many, many more ...

[s_11_ml.py:189] exec_prog => done

[s_11_ml.py:224] all done
 
============================  
[s_11_ml.py:96] sklerarn-related imports => done

[s_11_ml.py:148] starting : test_1 (time=20210421_164809)

[s_11_ml.py:165] load_iris => done
[s_11_ml.py:186] train_test_split => done
X_train ==>
[[ 5.9  3.   4.2  1.5]
 [ 5.8  2.6  4.   1.2]
 [ 6.8  3.   5.5  2.1]
 [ 4.7  3.2  1.3  0.2]
 [ 6.9  3.1  5.1  2.3]
 [ 5.   3.5  1.6  0.6]
 [ 5.4  3.7  1.5  0.2]
 [ 5.   2.   3.5  1. ]
 [ 6.5  3.   5.5  1.8]
 [ 6.7  3.3  5.7  2.5]
 [ 6.   2.2  5.   1.5]
 [ 6.7  2.5  5.8  1.8]
 [ 5.6  2.5  3.9  1.1]
 [ 7.7  3.   6.1  2.3]
 [ 6.3  3.3  4.7  1.6]
 [ 5.5  2.4  3.8  1.1]
 [ 6.3  2.7  4.9  1.8]
 [ 6.3  2.8  5.1  1.5]
 [ 4.9  2.5  4.5  1.7]
 [ 6.3  2.5  5.   1.9]
 [ 7.   3.2  4.7  1.4]
 [ 6.5  3.   5.2  2. ]
 [ 6.   3.4  4.5  1.6]
 [ 4.8  3.1  1.6  0.2]
 [ 5.8  2.7  5.1  1.9]
 [ 5.6  2.7  4.2  1.3]
 [ 5.6  2.9  3.6  1.3]
 [ 5.5  2.5  4.   1.3]
 [ 6.1  3.   4.6  1.4]
 [ 7.2  3.2  6.   1.8]
 [ 5.3  3.7  1.5  0.2]
 [ 4.3  3.   1.1  0.1]
 [ 6.4  2.7  5.3  1.9]
 [ 5.7  3.   4.2  1.2]
 [ 5.4  3.4  1.7  0.2]
 [ 5.7  4.4  1.5  0.4]
 [ 6.9  3.1  4.9  1.5]
 [ 4.6  3.1  1.5  0.2]
 [ 5.9  3.   5.1  1.8]
 [ 5.1  2.5  3.   1.1]
 [ 4.6  3.4  1.4  0.3]
 [ 6.2  2.2  4.5  1.5]
 [ 7.2  3.6  6.1  2.5]
 [ 5.7  2.9  4.2  1.3]
 [ 4.8  3.   1.4  0.1]
 [ 7.1  3.   5.9  2.1]
 [ 6.9  3.2  5.7  2.3]
 [ 6.5  3.   5.8  2.2]
 [ 6.4  2.8  5.6  2.1]
 [ 5.1  3.8  1.6  0.2]
 [ 4.8  3.4  1.6  0.2]
 [ 6.5  3.2  5.1  2. ]
 [ 6.7  3.3  5.7  2.1]
 [ 4.5  2.3  1.3  0.3]
 [ 6.2  3.4  5.4  2.3]
 [ 4.9  3.   1.4  0.2]
 [ 5.7  2.5  5.   2. ]
 [ 6.9  3.1  5.4  2.1]
 [ 4.4  3.2  1.3  0.2]
 [ 5.   3.6  1.4  0.2]
 [ 7.2  3.   5.8  1.6]
 [ 5.1  3.5  1.4  0.3]
 [ 4.4  3.   1.3  0.2]
 [ 5.4  3.9  1.7  0.4]
 [ 5.5  2.3  4.   1.3]
 [ 6.8  3.2  5.9  2.3]
 [ 7.6  3.   6.6  2.1]
 [ 5.1  3.5  1.4  0.2]
 [ 4.9  3.1  1.5  0.1]
 [ 5.2  3.4  1.4  0.2]
 [ 5.7  2.8  4.5  1.3]
 [ 6.6  3.   4.4  1.4]
 [ 5.   3.2  1.2  0.2]
 [ 5.1  3.3  1.7  0.5]
 [ 6.4  2.9  4.3  1.3]
 [ 5.4  3.4  1.5  0.4]
 [ 7.7  2.6  6.9  2.3]
 [ 4.9  2.4  3.3  1. ]
 [ 7.9  3.8  6.4  2. ]
 [ 6.7  3.1  4.4  1.4]
 [ 5.2  4.1  1.5  0.1]
 [ 6.   3.   4.8  1.8]
 [ 5.8  4.   1.2  0.2]
 [ 7.7  2.8  6.7  2. ]
 [ 5.1  3.8  1.5  0.3]
 [ 4.7  3.2  1.6  0.2]
 [ 7.4  2.8  6.1  1.9]
 [ 5.   3.3  1.4  0.2]
 [ 6.3  3.4  5.6  2.4]
 [ 5.7  2.8  4.1  1.3]
 [ 5.8  2.7  3.9  1.2]
 [ 5.7  2.6  3.5  1. ]
 [ 6.4  3.2  5.3  2.3]
 [ 6.7  3.   5.2  2.3]
 [ 6.3  2.5  4.9  1.5]
 [ 6.7  3.   5.   1.7]
 [ 5.   3.   1.6  0.2]
 [ 5.5  2.4  3.7  1. ]
 [ 6.7  3.1  5.6  2.4]
 [ 5.8  2.7  5.1  1.9]
 [ 5.1  3.4  1.5  0.2]
 [ 6.6  2.9  4.6  1.3]
 [ 5.6  3.   4.1  1.3]
 [ 5.9  3.2  4.8  1.8]
 [ 6.3  2.3  4.4  1.3]
 [ 5.5  3.5  1.3  0.2]
 [ 5.1  3.7  1.5  0.4]
 [ 4.9  3.1  1.5  0.1]
 [ 6.3  2.9  5.6  1.8]
 [ 5.8  2.7  4.1  1. ]
 [ 7.7  3.8  6.7  2.2]
 [ 4.6  3.2  1.4  0.2]]
[s_11_ml.py:210] exec_prog => done

[s_11_ml.py:245] all done
 
============================  
[s_11_ml.py:96] sklerarn-related imports => done

[s_11_ml.py:148] starting : test_1 (time=20210421_164847)

[s_11_ml.py:165] load_iris => done
[s_11_ml.py:186] train_test_split => done
X_train ==>
[[ 5.9  3.   4.2  1.5]
 [ 5.8  2.6  4.   1.2]
 [ 6.8  3.   5.5  2.1]
 [ 4.7  3.2  1.3  0.2]
 [ 6.9  3.1  5.1  2.3]
 [ 5.   3.5  1.6  0.6]
 [ 5.4  3.7  1.5  0.2]
 [ 5.   2.   3.5  1. ]
 [ 6.5  3.   5.5  1.8]
 [ 6.7  3.3  5.7  2.5]
 [ 6.   2.2  5.   1.5]
 [ 6.7  2.5  5.8  1.8]
 [ 5.6  2.5  3.9  1.1]
 [ 7.7  3.   6.1  2.3]
 [ 6.3  3.3  4.7  1.6]
 [ 5.5  2.4  3.8  1.1]
 [ 6.3  2.7  4.9  1.8]
 [ 6.3  2.8  5.1  1.5]
 [ 4.9  2.5  4.5  1.7]
 [ 6.3  2.5  5.   1.9]
 [ 7.   3.2  4.7  1.4]
 [ 6.5  3.   5.2  2. ]
 [ 6.   3.4  4.5  1.6]
 [ 4.8  3.1  1.6  0.2]
 [ 5.8  2.7  5.1  1.9]
 [ 5.6  2.7  4.2  1.3]
 [ 5.6  2.9  3.6  1.3]
 [ 5.5  2.5  4.   1.3]
 [ 6.1  3.   4.6  1.4]
 [ 7.2  3.2  6.   1.8]
 [ 5.3  3.7  1.5  0.2]
 [ 4.3  3.   1.1  0.1]
 [ 6.4  2.7  5.3  1.9]
 [ 5.7  3.   4.2  1.2]
 [ 5.4  3.4  1.7  0.2]
 [ 5.7  4.4  1.5  0.4]
 [ 6.9  3.1  4.9  1.5]
 [ 4.6  3.1  1.5  0.2]
 [ 5.9  3.   5.1  1.8]
 [ 5.1  2.5  3.   1.1]
 [ 4.6  3.4  1.4  0.3]
 [ 6.2  2.2  4.5  1.5]
 [ 7.2  3.6  6.1  2.5]
 [ 5.7  2.9  4.2  1.3]
 [ 4.8  3.   1.4  0.1]
 [ 7.1  3.   5.9  2.1]
 [ 6.9  3.2  5.7  2.3]
 [ 6.5  3.   5.8  2.2]
 [ 6.4  2.8  5.6  2.1]
 [ 5.1  3.8  1.6  0.2]
 [ 4.8  3.4  1.6  0.2]
 [ 6.5  3.2  5.1  2. ]
 [ 6.7  3.3  5.7  2.1]
 [ 4.5  2.3  1.3  0.3]
 [ 6.2  3.4  5.4  2.3]
 [ 4.9  3.   1.4  0.2]
 [ 5.7  2.5  5.   2. ]
 [ 6.9  3.1  5.4  2.1]
 [ 4.4  3.2  1.3  0.2]
 [ 5.   3.6  1.4  0.2]
 [ 7.2  3.   5.8  1.6]
 [ 5.1  3.5  1.4  0.3]
 [ 4.4  3.   1.3  0.2]
 [ 5.4  3.9  1.7  0.4]
 [ 5.5  2.3  4.   1.3]
 [ 6.8  3.2  5.9  2.3]
 [ 7.6  3.   6.6  2.1]
 [ 5.1  3.5  1.4  0.2]
 [ 4.9  3.1  1.5  0.1]
 [ 5.2  3.4  1.4  0.2]
 [ 5.7  2.8  4.5  1.3]
 [ 6.6  3.   4.4  1.4]
 [ 5.   3.2  1.2  0.2]
 [ 5.1  3.3  1.7  0.5]
 [ 6.4  2.9  4.3  1.3]
 [ 5.4  3.4  1.5  0.4]
 [ 7.7  2.6  6.9  2.3]
 [ 4.9  2.4  3.3  1. ]
 [ 7.9  3.8  6.4  2. ]
 [ 6.7  3.1  4.4  1.4]
 [ 5.2  4.1  1.5  0.1]
 [ 6.   3.   4.8  1.8]
 [ 5.8  4.   1.2  0.2]
 [ 7.7  2.8  6.7  2. ]
 [ 5.1  3.8  1.5  0.3]
 [ 4.7  3.2  1.6  0.2]
 [ 7.4  2.8  6.1  1.9]
 [ 5.   3.3  1.4  0.2]
 [ 6.3  3.4  5.6  2.4]
 [ 5.7  2.8  4.1  1.3]
 [ 5.8  2.7  3.9  1.2]
 [ 5.7  2.6  3.5  1. ]
 [ 6.4  3.2  5.3  2.3]
 [ 6.7  3.   5.2  2.3]
 [ 6.3  2.5  4.9  1.5]
 [ 6.7  3.   5.   1.7]
 [ 5.   3.   1.6  0.2]
 [ 5.5  2.4  3.7  1. ]
 [ 6.7  3.1  5.6  2.4]
 [ 5.8  2.7  5.1  1.9]
 [ 5.1  3.4  1.5  0.2]
 [ 6.6  2.9  4.6  1.3]
 [ 5.6  3.   4.1  1.3]
 [ 5.9  3.2  4.8  1.8]
 [ 6.3  2.3  4.4  1.3]
 [ 5.5  3.5  1.3  0.2]
 [ 5.1  3.7  1.5  0.4]
 [ 4.9  3.1  1.5  0.1]
 [ 6.3  2.9  5.6  1.8]
 [ 5.8  2.7  4.1  1. ]
 [ 7.7  3.8  6.7  2.2]
 [ 4.6  3.2  1.4  0.2]]

X_test ==>
[[ 5.8  2.8  5.1  2.4]
 [ 6.   2.2  4.   1. ]
 [ 5.5  4.2  1.4  0.2]
 [ 7.3  2.9  6.3  1.8]
 [ 5.   3.4  1.5  0.2]
 [ 6.3  3.3  6.   2.5]
 [ 5.   3.5  1.3  0.3]
 [ 6.7  3.1  4.7  1.5]
 [ 6.8  2.8  4.8  1.4]
 [ 6.1  2.8  4.   1.3]
 [ 6.1  2.6  5.6  1.4]
 [ 6.4  3.2  4.5  1.5]
 [ 6.1  2.8  4.7  1.2]
 [ 6.5  2.8  4.6  1.5]
 [ 6.1  2.9  4.7  1.4]
 [ 4.9  3.1  1.5  0.1]
 [ 6.   2.9  4.5  1.5]
 [ 5.5  2.6  4.4  1.2]
 [ 4.8  3.   1.4  0.3]
 [ 5.4  3.9  1.3  0.4]
 [ 5.6  2.8  4.9  2. ]
 [ 5.6  3.   4.5  1.5]
 [ 4.8  3.4  1.9  0.2]
 [ 4.4  2.9  1.4  0.2]
 [ 6.2  2.8  4.8  1.8]
 [ 4.6  3.6  1.   0.2]
 [ 5.1  3.8  1.9  0.4]
 [ 6.2  2.9  4.3  1.3]
 [ 5.   2.3  3.3  1. ]
 [ 5.   3.4  1.6  0.4]
 [ 6.4  3.1  5.5  1.8]
 [ 5.4  3.   4.5  1.5]
 [ 5.2  3.5  1.5  0.2]
 [ 6.1  3.   4.9  1.8]
 [ 6.4  2.8  5.6  2.2]
 [ 5.2  2.7  3.9  1.4]
 [ 5.7  3.8  1.7  0.3]
 [ 6.   2.7  5.1  1.6]]
[s_11_ml.py:214] exec_prog => done

[s_11_ml.py:249] all done
 
============================  
[s_11_ml.py:96] sklerarn-related imports => done

[s_11_ml.py:148] starting : test_1 (time=20210421_165104)

[s_11_ml.py:165] load_iris => done
[s_11_ml.py:186] train_test_split => done
[s_11_ml.py:206] KNeighborsClassifier => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:245] exec_prog => done

[s_11_ml.py:280] all done
 
============================  
[s_11_ml.py:96] sklerarn-related imports => done

[s_11_ml.py:148] starting : test_1 (time=20210421_165307)

[s_11_ml.py:165] load_iris => done
[s_11_ml.py:186] train_test_split => done
[s_11_ml.py:210] KNeighborsClassifier => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:226] KNeighborsClassifier : fit => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:265] exec_prog => done

[s_11_ml.py:300] all done
 
============================  
[s_11_ml.py:96] sklerarn-related imports => done

[s_11_ml.py:148] starting : test_1 (time=20210421_165552)

[s_11_ml.py:165] load_iris => done
[s_11_ml.py:186] train_test_split => done
[s_11_ml.py:210] KNeighborsClassifier => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:226] KNeighborsClassifier : fit => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:242] np.array => done
x_new ==>
[[ 5.   2.9  1.   0.2]]
[s_11_ml.py:281] exec_prog => done

[s_11_ml.py:316] all done
 
============================  
[s_11_ml.py:96] sklerarn-related imports => done

[s_11_ml.py:148] starting : test_1 (time=20210421_165805)

[s_11_ml.py:165] load_iris => done
[s_11_ml.py:186] train_test_split => done
[s_11_ml.py:210] KNeighborsClassifier => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:226] KNeighborsClassifier : fit => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:242] np.array => done
x_new ==>
[[ 5.   2.9  1.   0.2]]
[s_11_ml.py:258] predict => done
prediction ==>
[0]
[s_11_ml.py:297] exec_prog => done

[s_11_ml.py:332] all done
 
============================  
[s_11_ml.py:96] sklerarn-related imports => done

[s_11_ml.py:148] starting : test_1 (time=20210421_170040)

[s_11_ml.py:165] load_iris => done
[s_11_ml.py:186] train_test_split => done
[s_11_ml.py:210] KNeighborsClassifier => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:226] KNeighborsClassifier : fit => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:242] np.array => done
x_new ==>
[[ 5.   2.9  1.   0.2]]
[s_11_ml.py:258] predict => done
[s_11_ml.py:274] results => 
Predicted target value: [0]

Predicted feature name: ['setosa']

Test score: 0.97
[s_11_ml.py:315] exec_prog => done

[s_11_ml.py:350] all done
 
============================  
[s_11_ml.py:96] sklerarn-related imports => done

[s_11_ml.py:148] starting : test_1 (time=20210421_170220)

[s_11_ml.py:165] load_iris => done
[s_11_ml.py:186] train_test_split => done
[s_11_ml.py:210] KNeighborsClassifier => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:226] KNeighborsClassifier : fit => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:242] np.array => done
x_new ==>
[[ 5.   2.9  1.   0.2]]
[s_11_ml.py:258] predict => done
[s_11_ml.py:274] results => 
probe data =>
[[ 5.   2.9  1.   0.2]]

Predicted target value: [0]

Predicted feature name: ['setosa']

Test score: 0.97
[s_11_ml.py:319] exec_prog => done

[s_11_ml.py:354] all done
 
============================  
[s_11_ml.py:96] sklerarn-related imports => done

[s_11_ml.py:148] starting : test_1 (time=20210421_171240)

[s_11_ml.py:165] load_iris => done
[s_11_ml.py:186] train_test_split => done
[s_11_ml.py:210] KNeighborsClassifier => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:226] KNeighborsClassifier : fit => done
kn ==>
KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=1, p=2,
           weights='uniform')
[s_11_ml.py:242] np.array => done
x_new ==>
[[ 5.   2.9  1.   0.2]]
[s_11_ml.py:258] predict => done
[s_11_ml.py:274] results => 
probe data =>
[[ 5.   2.9  1.   0.2]]

Predicted target value: [0]

Predicted feature name: ['setosa']

Test score: 0.97
[s_11_ml.py:291] X_test => 
X_test =>
[[ 5.8  2.8  5.1  2.4]
 [ 6.   2.2  4.   1. ]
 [ 5.5  4.2  1.4  0.2]
 [ 7.3  2.9  6.3  1.8]
 [ 5.   3.4  1.5  0.2]
 [ 6.3  3.3  6.   2.5]
 [ 5.   3.5  1.3  0.3]
 [ 6.7  3.1  4.7  1.5]
 [ 6.8  2.8  4.8  1.4]
 [ 6.1  2.8  4.   1.3]
 [ 6.1  2.6  5.6  1.4]
 [ 6.4  3.2  4.5  1.5]
 [ 6.1  2.8  4.7  1.2]
 [ 6.5  2.8  4.6  1.5]
 [ 6.1  2.9  4.7  1.4]
 [ 4.9  3.1  1.5  0.1]
 [ 6.   2.9  4.5  1.5]
 [ 5.5  2.6  4.4  1.2]
 [ 4.8  3.   1.4  0.3]
 [ 5.4  3.9  1.3  0.4]
 [ 5.6  2.8  4.9  2. ]
 [ 5.6  3.   4.5  1.5]
 [ 4.8  3.4  1.9  0.2]
 [ 4.4  2.9  1.4  0.2]
 [ 6.2  2.8  4.8  1.8]
 [ 4.6  3.6  1.   0.2]
 [ 5.1  3.8  1.9  0.4]
 [ 6.2  2.9  4.3  1.3]
 [ 5.   2.3  3.3  1. ]
 [ 5.   3.4  1.6  0.4]
 [ 6.4  3.1  5.5  1.8]
 [ 5.4  3.   4.5  1.5]
 [ 5.2  3.5  1.5  0.2]
 [ 6.1  3.   4.9  1.8]
 [ 6.4  2.8  5.6  2.2]
 [ 5.2  2.7  3.9  1.4]
 [ 5.7  3.8  1.7  0.3]
 [ 6.   2.7  5.1  1.6]]

y_test =>
[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0
 1]
[s_11_ml.py:335] exec_prog => done

[s_11_ml.py:370] all done
 
============================  
[s_11_ml.py:97] sklerarn-related imports => done

[s_11_ml.py:335] starting : test_S_12_Scikit (time=20210422_161907)

[s_11_ml.py:352] load_iris => done
[s_11_ml.py:385] exec_prog => done

[s_11_ml.py:420] all done
 
============================  
[s_11_ml.py:97] sklerarn-related imports => done

[s_11_ml.py:336] starting : test_S_12_Scikit (time=20210422_162157)

[s_11_ml.py:353] load_iris => done
[s_11_ml.py:367] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:402] exec_prog => done

[s_11_ml.py:437] all done
 
============================  
[s_11_ml.py:97] sklerarn-related imports => done

[s_11_ml.py:336] starting : test_S_12_Scikit (time=20210422_162451)

[s_11_ml.py:353] load_iris => done

[s_11_ml.py:362] iris =>
{'target_names': array(['setosa', 'versicolor', 'virginica'],
      dtype='<U10'), 'feature_names': ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)'], 'DESCR': 'Iris Plants Database\n====================\n\nNotes\n-----\nData Set Characteristics:\n    :Number of Instances: 150 (50 in each of three classes)\n    :Number of Attributes: 4 numeric, predictive attributes and the class\n    :Attribute Information:\n        - sepal length in cm\n        - sepal width in cm\n        - petal length in cm\n        - petal width in cm\n        - class:\n                - Iris-Setosa\n                - Iris-Versicolour\n                - Iris-Virginica\n    :Summary Statistics:\n\n    ============== ==== ==== ======= ===== ====================\n                    Min  Max   Mean    SD   Class Correlation\n    ============== ==== ==== ======= ===== ====================\n    sepal length:   4.3  7.9   5.84   0.83    0.7826\n    sepal width:    2.0  4.4   3.05   0.43   -0.4194\n    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\n    petal width:    0.1  2.5   1.20  0.76     0.9565  (high!)\n    ============== ==== ==== ======= ===== ====================\n\n    :Missing Attribute Values: None\n    :Class Distribution: 33.3% for each of 3 classes.\n    :Creator: R.A. Fisher\n    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\n    :Date: July, 1988\n\nThis is a copy of UCI ML iris datasets.\nhttp://archive.ics.uci.edu/ml/datasets/Iris\n\nThe famous Iris database, first used by Sir R.A Fisher\n\nThis is perhaps the best known database to be found in the\npattern recognition literature.  Fisher\'s paper is a classic in the field and\nis referenced frequently to this day.  (See Duda & Hart, for example.)  The\ndata set contains 3 classes of 50 instances each, where each class refers to a\ntype of iris plant.  One class is linearly separable from the other 2; the\nlatter are NOT linearly separable from each other.\n\nReferences\n----------\n   - Fisher,R.A. "The use of multiple measurements in taxonomic problems"\n     Annual Eugenics, 7, Part II, 179-188 (1936); also in "Contributions to\n     Mathematical Statistics" (John Wiley, NY, 1950).\n   - Duda,R.O., & Hart,P.E. (1973) Pattern Classification and Scene Analysis.\n     (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\n   - Dasarathy, B.V. (1980) "Nosing Around the Neighborhood: A New System\n     Structure and Classification Rule for Recognition in Partially Exposed\n     Environments".  IEEE Transactions on Pattern Analysis and Machine\n     Intelligence, Vol. PAMI-2, No. 1, 67-71.\n   - Gates, G.W. (1972) "The Reduced Nearest Neighbor Rule".  IEEE Transactions\n     on Information Theory, May 1972, 431-433.\n   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al"s AUTOCLASS II\n     conceptual clustering system finds 3 classes in the data.\n   - Many, many more ...\n', 'data': array([[ 5.1,  3.5,  1.4,  0.2],
       [ 4.9,  3. ,  1.4,  0.2],
       [ 4.7,  3.2,  1.3,  0.2],
       [ 4.6,  3.1,  1.5,  0.2],
       [ 5. ,  3.6,  1.4,  0.2],
       [ 5.4,  3.9,  1.7,  0.4],
       [ 4.6,  3.4,  1.4,  0.3],
       [ 5. ,  3.4,  1.5,  0.2],
       [ 4.4,  2.9,  1.4,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 5.4,  3.7,  1.5,  0.2],
       [ 4.8,  3.4,  1.6,  0.2],
       [ 4.8,  3. ,  1.4,  0.1],
       [ 4.3,  3. ,  1.1,  0.1],
       [ 5.8,  4. ,  1.2,  0.2],
       [ 5.7,  4.4,  1.5,  0.4],
       [ 5.4,  3.9,  1.3,  0.4],
       [ 5.1,  3.5,  1.4,  0.3],
       [ 5.7,  3.8,  1.7,  0.3],
       [ 5.1,  3.8,  1.5,  0.3],
       [ 5.4,  3.4,  1.7,  0.2],
       [ 5.1,  3.7,  1.5,  0.4],
       [ 4.6,  3.6,  1. ,  0.2],
       [ 5.1,  3.3,  1.7,  0.5],
       [ 4.8,  3.4,  1.9,  0.2],
       [ 5. ,  3. ,  1.6,  0.2],
       [ 5. ,  3.4,  1.6,  0.4],
       [ 5.2,  3.5,  1.5,  0.2],
       [ 5.2,  3.4,  1.4,  0.2],
       [ 4.7,  3.2,  1.6,  0.2],
       [ 4.8,  3.1,  1.6,  0.2],
       [ 5.4,  3.4,  1.5,  0.4],
       [ 5.2,  4.1,  1.5,  0.1],
       [ 5.5,  4.2,  1.4,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 5. ,  3.2,  1.2,  0.2],
       [ 5.5,  3.5,  1.3,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 4.4,  3. ,  1.3,  0.2],
       [ 5.1,  3.4,  1.5,  0.2],
       [ 5. ,  3.5,  1.3,  0.3],
       [ 4.5,  2.3,  1.3,  0.3],
       [ 4.4,  3.2,  1.3,  0.2],
       [ 5. ,  3.5,  1.6,  0.6],
       [ 5.1,  3.8,  1.9,  0.4],
       [ 4.8,  3. ,  1.4,  0.3],
       [ 5.1,  3.8,  1.6,  0.2],
       [ 4.6,  3.2,  1.4,  0.2],
       [ 5.3,  3.7,  1.5,  0.2],
       [ 5. ,  3.3,  1.4,  0.2],
       [ 7. ,  3.2,  4.7,  1.4],
       [ 6.4,  3.2,  4.5,  1.5],
       [ 6.9,  3.1,  4.9,  1.5],
       [ 5.5,  2.3,  4. ,  1.3],
       [ 6.5,  2.8,  4.6,  1.5],
       [ 5.7,  2.8,  4.5,  1.3],
       [ 6.3,  3.3,  4.7,  1.6],
       [ 4.9,  2.4,  3.3,  1. ],
       [ 6.6,  2.9,  4.6,  1.3],
       [ 5.2,  2.7,  3.9,  1.4],
       [ 5. ,  2. ,  3.5,  1. ],
       [ 5.9,  3. ,  4.2,  1.5],
       [ 6. ,  2.2,  4. ,  1. ],
       [ 6.1,  2.9,  4.7,  1.4],
       [ 5.6,  2.9,  3.6,  1.3],
       [ 6.7,  3.1,  4.4,  1.4],
       [ 5.6,  3. ,  4.5,  1.5],
       [ 5.8,  2.7,  4.1,  1. ],
       [ 6.2,  2.2,  4.5,  1.5],
       [ 5.6,  2.5,  3.9,  1.1],
       [ 5.9,  3.2,  4.8,  1.8],
       [ 6.1,  2.8,  4. ,  1.3],
       [ 6.3,  2.5,  4.9,  1.5],
       [ 6.1,  2.8,  4.7,  1.2],
       [ 6.4,  2.9,  4.3,  1.3],
       [ 6.6,  3. ,  4.4,  1.4],
       [ 6.8,  2.8,  4.8,  1.4],
       [ 6.7,  3. ,  5. ,  1.7],
       [ 6. ,  2.9,  4.5,  1.5],
       [ 5.7,  2.6,  3.5,  1. ],
       [ 5.5,  2.4,  3.8,  1.1],
       [ 5.5,  2.4,  3.7,  1. ],
       [ 5.8,  2.7,  3.9,  1.2],
       [ 6. ,  2.7,  5.1,  1.6],
       [ 5.4,  3. ,  4.5,  1.5],
       [ 6. ,  3.4,  4.5,  1.6],
       [ 6.7,  3.1,  4.7,  1.5],
       [ 6.3,  2.3,  4.4,  1.3],
       [ 5.6,  3. ,  4.1,  1.3],
       [ 5.5,  2.5,  4. ,  1.3],
       [ 5.5,  2.6,  4.4,  1.2],
       [ 6.1,  3. ,  4.6,  1.4],
       [ 5.8,  2.6,  4. ,  1.2],
       [ 5. ,  2.3,  3.3,  1. ],
       [ 5.6,  2.7,  4.2,  1.3],
       [ 5.7,  3. ,  4.2,  1.2],
       [ 5.7,  2.9,  4.2,  1.3],
       [ 6.2,  2.9,  4.3,  1.3],
       [ 5.1,  2.5,  3. ,  1.1],
       [ 5.7,  2.8,  4.1,  1.3],
       [ 6.3,  3.3,  6. ,  2.5],
       [ 5.8,  2.7,  5.1,  1.9],
       [ 7.1,  3. ,  5.9,  2.1],
       [ 6.3,  2.9,  5.6,  1.8],
       [ 6.5,  3. ,  5.8,  2.2],
       [ 7.6,  3. ,  6.6,  2.1],
       [ 4.9,  2.5,  4.5,  1.7],
       [ 7.3,  2.9,  6.3,  1.8],
       [ 6.7,  2.5,  5.8,  1.8],
       [ 7.2,  3.6,  6.1,  2.5],
       [ 6.5,  3.2,  5.1,  2. ],
       [ 6.4,  2.7,  5.3,  1.9],
       [ 6.8,  3. ,  5.5,  2.1],
       [ 5.7,  2.5,  5. ,  2. ],
       [ 5.8,  2.8,  5.1,  2.4],
       [ 6.4,  3.2,  5.3,  2.3],
       [ 6.5,  3. ,  5.5,  1.8],
       [ 7.7,  3.8,  6.7,  2.2],
       [ 7.7,  2.6,  6.9,  2.3],
       [ 6. ,  2.2,  5. ,  1.5],
       [ 6.9,  3.2,  5.7,  2.3],
       [ 5.6,  2.8,  4.9,  2. ],
       [ 7.7,  2.8,  6.7,  2. ],
       [ 6.3,  2.7,  4.9,  1.8],
       [ 6.7,  3.3,  5.7,  2.1],
       [ 7.2,  3.2,  6. ,  1.8],
       [ 6.2,  2.8,  4.8,  1.8],
       [ 6.1,  3. ,  4.9,  1.8],
       [ 6.4,  2.8,  5.6,  2.1],
       [ 7.2,  3. ,  5.8,  1.6],
       [ 7.4,  2.8,  6.1,  1.9],
       [ 7.9,  3.8,  6.4,  2. ],
       [ 6.4,  2.8,  5.6,  2.2],
       [ 6.3,  2.8,  5.1,  1.5],
       [ 6.1,  2.6,  5.6,  1.4],
       [ 7.7,  3. ,  6.1,  2.3],
       [ 6.3,  3.4,  5.6,  2.4],
       [ 6.4,  3.1,  5.5,  1.8],
       [ 6. ,  3. ,  4.8,  1.8],
       [ 6.9,  3.1,  5.4,  2.1],
       [ 6.7,  3.1,  5.6,  2.4],
       [ 6.9,  3.1,  5.1,  2.3],
       [ 5.8,  2.7,  5.1,  1.9],
       [ 6.8,  3.2,  5.9,  2.3],
       [ 6.7,  3.3,  5.7,  2.5],
       [ 6.7,  3. ,  5.2,  2.3],
       [ 6.3,  2.5,  5. ,  1.9],
       [ 6.5,  3. ,  5.2,  2. ],
       [ 6.2,  3.4,  5.4,  2.3],
       [ 5.9,  3. ,  5.1,  1.8]]), 'target': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])}

[s_11_ml.py:379] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:393] type(X) =>
 
============================  
[s_11_ml.py:97] sklerarn-related imports => done

[s_11_ml.py:336] starting : test_S_12_Scikit (time=20210422_162536)

[s_11_ml.py:353] load_iris => done

[s_11_ml.py:372] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:382] iris =>
{'DESCR': 'Iris Plants Database\n====================\n\nNotes\n-----\nData Set Characteristics:\n    :Number of Instances: 150 (50 in each of three classes)\n    :Number of Attributes: 4 numeric, predictive attributes and the class\n    :Attribute Information:\n        - sepal length in cm\n        - sepal width in cm\n        - petal length in cm\n        - petal width in cm\n        - class:\n                - Iris-Setosa\n                - Iris-Versicolour\n                - Iris-Virginica\n    :Summary Statistics:\n\n    ============== ==== ==== ======= ===== ====================\n                    Min  Max   Mean    SD   Class Correlation\n    ============== ==== ==== ======= ===== ====================\n    sepal length:   4.3  7.9   5.84   0.83    0.7826\n    sepal width:    2.0  4.4   3.05   0.43   -0.4194\n    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\n    petal width:    0.1  2.5   1.20  0.76     0.9565  (high!)\n    ============== ==== ==== ======= ===== ====================\n\n    :Missing Attribute Values: None\n    :Class Distribution: 33.3% for each of 3 classes.\n    :Creator: R.A. Fisher\n    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\n    :Date: July, 1988\n\nThis is a copy of UCI ML iris datasets.\nhttp://archive.ics.uci.edu/ml/datasets/Iris\n\nThe famous Iris database, first used by Sir R.A Fisher\n\nThis is perhaps the best known database to be found in the\npattern recognition literature.  Fisher\'s paper is a classic in the field and\nis referenced frequently to this day.  (See Duda & Hart, for example.)  The\ndata set contains 3 classes of 50 instances each, where each class refers to a\ntype of iris plant.  One class is linearly separable from the other 2; the\nlatter are NOT linearly separable from each other.\n\nReferences\n----------\n   - Fisher,R.A. "The use of multiple measurements in taxonomic problems"\n     Annual Eugenics, 7, Part II, 179-188 (1936); also in "Contributions to\n     Mathematical Statistics" (John Wiley, NY, 1950).\n   - Duda,R.O., & Hart,P.E. (1973) Pattern Classification and Scene Analysis.\n     (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\n   - Dasarathy, B.V. (1980) "Nosing Around the Neighborhood: A New System\n     Structure and Classification Rule for Recognition in Partially Exposed\n     Environments".  IEEE Transactions on Pattern Analysis and Machine\n     Intelligence, Vol. PAMI-2, No. 1, 67-71.\n   - Gates, G.W. (1972) "The Reduced Nearest Neighbor Rule".  IEEE Transactions\n     on Information Theory, May 1972, 431-433.\n   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al"s AUTOCLASS II\n     conceptual clustering system finds 3 classes in the data.\n   - Many, many more ...\n', 'data': array([[ 5.1,  3.5,  1.4,  0.2],
       [ 4.9,  3. ,  1.4,  0.2],
       [ 4.7,  3.2,  1.3,  0.2],
       [ 4.6,  3.1,  1.5,  0.2],
       [ 5. ,  3.6,  1.4,  0.2],
       [ 5.4,  3.9,  1.7,  0.4],
       [ 4.6,  3.4,  1.4,  0.3],
       [ 5. ,  3.4,  1.5,  0.2],
       [ 4.4,  2.9,  1.4,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 5.4,  3.7,  1.5,  0.2],
       [ 4.8,  3.4,  1.6,  0.2],
       [ 4.8,  3. ,  1.4,  0.1],
       [ 4.3,  3. ,  1.1,  0.1],
       [ 5.8,  4. ,  1.2,  0.2],
       [ 5.7,  4.4,  1.5,  0.4],
       [ 5.4,  3.9,  1.3,  0.4],
       [ 5.1,  3.5,  1.4,  0.3],
       [ 5.7,  3.8,  1.7,  0.3],
       [ 5.1,  3.8,  1.5,  0.3],
       [ 5.4,  3.4,  1.7,  0.2],
       [ 5.1,  3.7,  1.5,  0.4],
       [ 4.6,  3.6,  1. ,  0.2],
       [ 5.1,  3.3,  1.7,  0.5],
       [ 4.8,  3.4,  1.9,  0.2],
       [ 5. ,  3. ,  1.6,  0.2],
       [ 5. ,  3.4,  1.6,  0.4],
       [ 5.2,  3.5,  1.5,  0.2],
       [ 5.2,  3.4,  1.4,  0.2],
       [ 4.7,  3.2,  1.6,  0.2],
       [ 4.8,  3.1,  1.6,  0.2],
       [ 5.4,  3.4,  1.5,  0.4],
       [ 5.2,  4.1,  1.5,  0.1],
       [ 5.5,  4.2,  1.4,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 5. ,  3.2,  1.2,  0.2],
       [ 5.5,  3.5,  1.3,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 4.4,  3. ,  1.3,  0.2],
       [ 5.1,  3.4,  1.5,  0.2],
       [ 5. ,  3.5,  1.3,  0.3],
       [ 4.5,  2.3,  1.3,  0.3],
       [ 4.4,  3.2,  1.3,  0.2],
       [ 5. ,  3.5,  1.6,  0.6],
       [ 5.1,  3.8,  1.9,  0.4],
       [ 4.8,  3. ,  1.4,  0.3],
       [ 5.1,  3.8,  1.6,  0.2],
       [ 4.6,  3.2,  1.4,  0.2],
       [ 5.3,  3.7,  1.5,  0.2],
       [ 5. ,  3.3,  1.4,  0.2],
       [ 7. ,  3.2,  4.7,  1.4],
       [ 6.4,  3.2,  4.5,  1.5],
       [ 6.9,  3.1,  4.9,  1.5],
       [ 5.5,  2.3,  4. ,  1.3],
       [ 6.5,  2.8,  4.6,  1.5],
       [ 5.7,  2.8,  4.5,  1.3],
       [ 6.3,  3.3,  4.7,  1.6],
       [ 4.9,  2.4,  3.3,  1. ],
       [ 6.6,  2.9,  4.6,  1.3],
       [ 5.2,  2.7,  3.9,  1.4],
       [ 5. ,  2. ,  3.5,  1. ],
       [ 5.9,  3. ,  4.2,  1.5],
       [ 6. ,  2.2,  4. ,  1. ],
       [ 6.1,  2.9,  4.7,  1.4],
       [ 5.6,  2.9,  3.6,  1.3],
       [ 6.7,  3.1,  4.4,  1.4],
       [ 5.6,  3. ,  4.5,  1.5],
       [ 5.8,  2.7,  4.1,  1. ],
       [ 6.2,  2.2,  4.5,  1.5],
       [ 5.6,  2.5,  3.9,  1.1],
       [ 5.9,  3.2,  4.8,  1.8],
       [ 6.1,  2.8,  4. ,  1.3],
       [ 6.3,  2.5,  4.9,  1.5],
       [ 6.1,  2.8,  4.7,  1.2],
       [ 6.4,  2.9,  4.3,  1.3],
       [ 6.6,  3. ,  4.4,  1.4],
       [ 6.8,  2.8,  4.8,  1.4],
       [ 6.7,  3. ,  5. ,  1.7],
       [ 6. ,  2.9,  4.5,  1.5],
       [ 5.7,  2.6,  3.5,  1. ],
       [ 5.5,  2.4,  3.8,  1.1],
       [ 5.5,  2.4,  3.7,  1. ],
       [ 5.8,  2.7,  3.9,  1.2],
       [ 6. ,  2.7,  5.1,  1.6],
       [ 5.4,  3. ,  4.5,  1.5],
       [ 6. ,  3.4,  4.5,  1.6],
       [ 6.7,  3.1,  4.7,  1.5],
       [ 6.3,  2.3,  4.4,  1.3],
       [ 5.6,  3. ,  4.1,  1.3],
       [ 5.5,  2.5,  4. ,  1.3],
       [ 5.5,  2.6,  4.4,  1.2],
       [ 6.1,  3. ,  4.6,  1.4],
       [ 5.8,  2.6,  4. ,  1.2],
       [ 5. ,  2.3,  3.3,  1. ],
       [ 5.6,  2.7,  4.2,  1.3],
       [ 5.7,  3. ,  4.2,  1.2],
       [ 5.7,  2.9,  4.2,  1.3],
       [ 6.2,  2.9,  4.3,  1.3],
       [ 5.1,  2.5,  3. ,  1.1],
       [ 5.7,  2.8,  4.1,  1.3],
       [ 6.3,  3.3,  6. ,  2.5],
       [ 5.8,  2.7,  5.1,  1.9],
       [ 7.1,  3. ,  5.9,  2.1],
       [ 6.3,  2.9,  5.6,  1.8],
       [ 6.5,  3. ,  5.8,  2.2],
       [ 7.6,  3. ,  6.6,  2.1],
       [ 4.9,  2.5,  4.5,  1.7],
       [ 7.3,  2.9,  6.3,  1.8],
       [ 6.7,  2.5,  5.8,  1.8],
       [ 7.2,  3.6,  6.1,  2.5],
       [ 6.5,  3.2,  5.1,  2. ],
       [ 6.4,  2.7,  5.3,  1.9],
       [ 6.8,  3. ,  5.5,  2.1],
       [ 5.7,  2.5,  5. ,  2. ],
       [ 5.8,  2.8,  5.1,  2.4],
       [ 6.4,  3.2,  5.3,  2.3],
       [ 6.5,  3. ,  5.5,  1.8],
       [ 7.7,  3.8,  6.7,  2.2],
       [ 7.7,  2.6,  6.9,  2.3],
       [ 6. ,  2.2,  5. ,  1.5],
       [ 6.9,  3.2,  5.7,  2.3],
       [ 5.6,  2.8,  4.9,  2. ],
       [ 7.7,  2.8,  6.7,  2. ],
       [ 6.3,  2.7,  4.9,  1.8],
       [ 6.7,  3.3,  5.7,  2.1],
       [ 7.2,  3.2,  6. ,  1.8],
       [ 6.2,  2.8,  4.8,  1.8],
       [ 6.1,  3. ,  4.9,  1.8],
       [ 6.4,  2.8,  5.6,  2.1],
       [ 7.2,  3. ,  5.8,  1.6],
       [ 7.4,  2.8,  6.1,  1.9],
       [ 7.9,  3.8,  6.4,  2. ],
       [ 6.4,  2.8,  5.6,  2.2],
       [ 6.3,  2.8,  5.1,  1.5],
       [ 6.1,  2.6,  5.6,  1.4],
       [ 7.7,  3. ,  6.1,  2.3],
       [ 6.3,  3.4,  5.6,  2.4],
       [ 6.4,  3.1,  5.5,  1.8],
       [ 6. ,  3. ,  4.8,  1.8],
       [ 6.9,  3.1,  5.4,  2.1],
       [ 6.7,  3.1,  5.6,  2.4],
       [ 6.9,  3.1,  5.1,  2.3],
       [ 5.8,  2.7,  5.1,  1.9],
       [ 6.8,  3.2,  5.9,  2.3],
       [ 6.7,  3.3,  5.7,  2.5],
       [ 6.7,  3. ,  5.2,  2.3],
       [ 6.3,  2.5,  5. ,  1.9],
       [ 6.5,  3. ,  5.2,  2. ],
       [ 6.2,  3.4,  5.4,  2.3],
       [ 5.9,  3. ,  5.1,  1.8]]), 'target_names': array(['setosa', 'versicolor', 'virginica'],
      dtype='<U10'), 'target': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 'feature_names': ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']}

[s_11_ml.py:397] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:432] exec_prog => done

[s_11_ml.py:467] all done
 
============================  
[s_11_ml.py:97] sklerarn-related imports => done

[s_11_ml.py:336] starting : test_S_12_Scikit (time=20210422_162642)

[s_11_ml.py:353] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:372] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:382] iris =>
{'data': array([[ 5.1,  3.5,  1.4,  0.2],
       [ 4.9,  3. ,  1.4,  0.2],
       [ 4.7,  3.2,  1.3,  0.2],
       [ 4.6,  3.1,  1.5,  0.2],
       [ 5. ,  3.6,  1.4,  0.2],
       [ 5.4,  3.9,  1.7,  0.4],
       [ 4.6,  3.4,  1.4,  0.3],
       [ 5. ,  3.4,  1.5,  0.2],
       [ 4.4,  2.9,  1.4,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 5.4,  3.7,  1.5,  0.2],
       [ 4.8,  3.4,  1.6,  0.2],
       [ 4.8,  3. ,  1.4,  0.1],
       [ 4.3,  3. ,  1.1,  0.1],
       [ 5.8,  4. ,  1.2,  0.2],
       [ 5.7,  4.4,  1.5,  0.4],
       [ 5.4,  3.9,  1.3,  0.4],
       [ 5.1,  3.5,  1.4,  0.3],
       [ 5.7,  3.8,  1.7,  0.3],
       [ 5.1,  3.8,  1.5,  0.3],
       [ 5.4,  3.4,  1.7,  0.2],
       [ 5.1,  3.7,  1.5,  0.4],
       [ 4.6,  3.6,  1. ,  0.2],
       [ 5.1,  3.3,  1.7,  0.5],
       [ 4.8,  3.4,  1.9,  0.2],
       [ 5. ,  3. ,  1.6,  0.2],
       [ 5. ,  3.4,  1.6,  0.4],
       [ 5.2,  3.5,  1.5,  0.2],
       [ 5.2,  3.4,  1.4,  0.2],
       [ 4.7,  3.2,  1.6,  0.2],
       [ 4.8,  3.1,  1.6,  0.2],
       [ 5.4,  3.4,  1.5,  0.4],
       [ 5.2,  4.1,  1.5,  0.1],
       [ 5.5,  4.2,  1.4,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 5. ,  3.2,  1.2,  0.2],
       [ 5.5,  3.5,  1.3,  0.2],
       [ 4.9,  3.1,  1.5,  0.1],
       [ 4.4,  3. ,  1.3,  0.2],
       [ 5.1,  3.4,  1.5,  0.2],
       [ 5. ,  3.5,  1.3,  0.3],
       [ 4.5,  2.3,  1.3,  0.3],
       [ 4.4,  3.2,  1.3,  0.2],
       [ 5. ,  3.5,  1.6,  0.6],
       [ 5.1,  3.8,  1.9,  0.4],
       [ 4.8,  3. ,  1.4,  0.3],
       [ 5.1,  3.8,  1.6,  0.2],
       [ 4.6,  3.2,  1.4,  0.2],
       [ 5.3,  3.7,  1.5,  0.2],
       [ 5. ,  3.3,  1.4,  0.2],
       [ 7. ,  3.2,  4.7,  1.4],
       [ 6.4,  3.2,  4.5,  1.5],
       [ 6.9,  3.1,  4.9,  1.5],
       [ 5.5,  2.3,  4. ,  1.3],
       [ 6.5,  2.8,  4.6,  1.5],
       [ 5.7,  2.8,  4.5,  1.3],
       [ 6.3,  3.3,  4.7,  1.6],
       [ 4.9,  2.4,  3.3,  1. ],
       [ 6.6,  2.9,  4.6,  1.3],
       [ 5.2,  2.7,  3.9,  1.4],
       [ 5. ,  2. ,  3.5,  1. ],
       [ 5.9,  3. ,  4.2,  1.5],
       [ 6. ,  2.2,  4. ,  1. ],
       [ 6.1,  2.9,  4.7,  1.4],
       [ 5.6,  2.9,  3.6,  1.3],
       [ 6.7,  3.1,  4.4,  1.4],
       [ 5.6,  3. ,  4.5,  1.5],
       [ 5.8,  2.7,  4.1,  1. ],
       [ 6.2,  2.2,  4.5,  1.5],
       [ 5.6,  2.5,  3.9,  1.1],
       [ 5.9,  3.2,  4.8,  1.8],
       [ 6.1,  2.8,  4. ,  1.3],
       [ 6.3,  2.5,  4.9,  1.5],
       [ 6.1,  2.8,  4.7,  1.2],
       [ 6.4,  2.9,  4.3,  1.3],
       [ 6.6,  3. ,  4.4,  1.4],
       [ 6.8,  2.8,  4.8,  1.4],
       [ 6.7,  3. ,  5. ,  1.7],
       [ 6. ,  2.9,  4.5,  1.5],
       [ 5.7,  2.6,  3.5,  1. ],
       [ 5.5,  2.4,  3.8,  1.1],
       [ 5.5,  2.4,  3.7,  1. ],
       [ 5.8,  2.7,  3.9,  1.2],
       [ 6. ,  2.7,  5.1,  1.6],
       [ 5.4,  3. ,  4.5,  1.5],
       [ 6. ,  3.4,  4.5,  1.6],
       [ 6.7,  3.1,  4.7,  1.5],
       [ 6.3,  2.3,  4.4,  1.3],
       [ 5.6,  3. ,  4.1,  1.3],
       [ 5.5,  2.5,  4. ,  1.3],
       [ 5.5,  2.6,  4.4,  1.2],
       [ 6.1,  3. ,  4.6,  1.4],
       [ 5.8,  2.6,  4. ,  1.2],
       [ 5. ,  2.3,  3.3,  1. ],
       [ 5.6,  2.7,  4.2,  1.3],
       [ 5.7,  3. ,  4.2,  1.2],
       [ 5.7,  2.9,  4.2,  1.3],
       [ 6.2,  2.9,  4.3,  1.3],
       [ 5.1,  2.5,  3. ,  1.1],
       [ 5.7,  2.8,  4.1,  1.3],
       [ 6.3,  3.3,  6. ,  2.5],
       [ 5.8,  2.7,  5.1,  1.9],
       [ 7.1,  3. ,  5.9,  2.1],
       [ 6.3,  2.9,  5.6,  1.8],
       [ 6.5,  3. ,  5.8,  2.2],
       [ 7.6,  3. ,  6.6,  2.1],
       [ 4.9,  2.5,  4.5,  1.7],
       [ 7.3,  2.9,  6.3,  1.8],
       [ 6.7,  2.5,  5.8,  1.8],
       [ 7.2,  3.6,  6.1,  2.5],
       [ 6.5,  3.2,  5.1,  2. ],
       [ 6.4,  2.7,  5.3,  1.9],
       [ 6.8,  3. ,  5.5,  2.1],
       [ 5.7,  2.5,  5. ,  2. ],
       [ 5.8,  2.8,  5.1,  2.4],
       [ 6.4,  3.2,  5.3,  2.3],
       [ 6.5,  3. ,  5.5,  1.8],
       [ 7.7,  3.8,  6.7,  2.2],
       [ 7.7,  2.6,  6.9,  2.3],
       [ 6. ,  2.2,  5. ,  1.5],
       [ 6.9,  3.2,  5.7,  2.3],
       [ 5.6,  2.8,  4.9,  2. ],
       [ 7.7,  2.8,  6.7,  2. ],
       [ 6.3,  2.7,  4.9,  1.8],
       [ 6.7,  3.3,  5.7,  2.1],
       [ 7.2,  3.2,  6. ,  1.8],
       [ 6.2,  2.8,  4.8,  1.8],
       [ 6.1,  3. ,  4.9,  1.8],
       [ 6.4,  2.8,  5.6,  2.1],
       [ 7.2,  3. ,  5.8,  1.6],
       [ 7.4,  2.8,  6.1,  1.9],
       [ 7.9,  3.8,  6.4,  2. ],
       [ 6.4,  2.8,  5.6,  2.2],
       [ 6.3,  2.8,  5.1,  1.5],
       [ 6.1,  2.6,  5.6,  1.4],
       [ 7.7,  3. ,  6.1,  2.3],
       [ 6.3,  3.4,  5.6,  2.4],
       [ 6.4,  3.1,  5.5,  1.8],
       [ 6. ,  3. ,  4.8,  1.8],
       [ 6.9,  3.1,  5.4,  2.1],
       [ 6.7,  3.1,  5.6,  2.4],
       [ 6.9,  3.1,  5.1,  2.3],
       [ 5.8,  2.7,  5.1,  1.9],
       [ 6.8,  3.2,  5.9,  2.3],
       [ 6.7,  3.3,  5.7,  2.5],
       [ 6.7,  3. ,  5.2,  2.3],
       [ 6.3,  2.5,  5. ,  1.9],
       [ 6.5,  3. ,  5.2,  2. ],
       [ 6.2,  3.4,  5.4,  2.3],
       [ 5.9,  3. ,  5.1,  1.8]]), 'target_names': array(['setosa', 'versicolor', 'virginica'],
      dtype='<U10'), 'DESCR': 'Iris Plants Database\n====================\n\nNotes\n-----\nData Set Characteristics:\n    :Number of Instances: 150 (50 in each of three classes)\n    :Number of Attributes: 4 numeric, predictive attributes and the class\n    :Attribute Information:\n        - sepal length in cm\n        - sepal width in cm\n        - petal length in cm\n        - petal width in cm\n        - class:\n                - Iris-Setosa\n                - Iris-Versicolour\n                - Iris-Virginica\n    :Summary Statistics:\n\n    ============== ==== ==== ======= ===== ====================\n                    Min  Max   Mean    SD   Class Correlation\n    ============== ==== ==== ======= ===== ====================\n    sepal length:   4.3  7.9   5.84   0.83    0.7826\n    sepal width:    2.0  4.4   3.05   0.43   -0.4194\n    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\n    petal width:    0.1  2.5   1.20  0.76     0.9565  (high!)\n    ============== ==== ==== ======= ===== ====================\n\n    :Missing Attribute Values: None\n    :Class Distribution: 33.3% for each of 3 classes.\n    :Creator: R.A. Fisher\n    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\n    :Date: July, 1988\n\nThis is a copy of UCI ML iris datasets.\nhttp://archive.ics.uci.edu/ml/datasets/Iris\n\nThe famous Iris database, first used by Sir R.A Fisher\n\nThis is perhaps the best known database to be found in the\npattern recognition literature.  Fisher\'s paper is a classic in the field and\nis referenced frequently to this day.  (See Duda & Hart, for example.)  The\ndata set contains 3 classes of 50 instances each, where each class refers to a\ntype of iris plant.  One class is linearly separable from the other 2; the\nlatter are NOT linearly separable from each other.\n\nReferences\n----------\n   - Fisher,R.A. "The use of multiple measurements in taxonomic problems"\n     Annual Eugenics, 7, Part II, 179-188 (1936); also in "Contributions to\n     Mathematical Statistics" (John Wiley, NY, 1950).\n   - Duda,R.O., & Hart,P.E. (1973) Pattern Classification and Scene Analysis.\n     (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\n   - Dasarathy, B.V. (1980) "Nosing Around the Neighborhood: A New System\n     Structure and Classification Rule for Recognition in Partially Exposed\n     Environments".  IEEE Transactions on Pattern Analysis and Machine\n     Intelligence, Vol. PAMI-2, No. 1, 67-71.\n   - Gates, G.W. (1972) "The Reduced Nearest Neighbor Rule".  IEEE Transactions\n     on Information Theory, May 1972, 431-433.\n   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al"s AUTOCLASS II\n     conceptual clustering system finds 3 classes in the data.\n   - Many, many more ...\n', 'feature_names': ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)'], 'target': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])}

[s_11_ml.py:397] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:432] exec_prog => done

[s_11_ml.py:467] all done
 
============================  
[s_11_ml.py:97] sklerarn-related imports => done

[s_11_ml.py:339] starting : test_S_12_Scikit (time=20210422_163059)

[s_11_ml.py:356] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:375] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:400] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:420] time => 0.015600204467773438

[s_11_ml.py:449] exec_prog => done

[s_11_ml.py:484] all done
 
============================  
[s_11_ml.py:97] sklerarn-related imports => done

[s_11_ml.py:343] starting : test_S_12_Scikit (time=20210422_163944)

[s_11_ml.py:360] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:379] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:404] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:425] time => 0.047

[s_11_ml.py:454] exec_prog => done

[s_11_ml.py:489] all done
 
============================  
[s_11_ml.py:97] sklerarn-related imports => done

[s_11_ml.py:343] starting : test_S_12_Scikit (time=20210422_164151)

[s_11_ml.py:360] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:379] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:404] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:418] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:440] time => 0.047 sec

[s_11_ml.py:469] exec_prog => done

[s_11_ml.py:504] all done
 
============================  
[s_11_ml.py:98] sklerarn-related imports => done

[s_11_ml.py:344] starting : test_S_12_Scikit (time=20210422_164657)

[s_11_ml.py:361] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:380] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:405] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:419] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:435] type(data) =>
<class 'pandas.core.frame.DataFrame'>

[s_11_ml.py:460] time => 0.140 sec

[s_11_ml.py:489] exec_prog => done

[s_11_ml.py:524] all done
 
============================  
[s_11_ml.py:98] sklerarn-related imports => done

[s_11_ml.py:344] starting : test_S_12_Scikit (time=20210422_164759)

[s_11_ml.py:361] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:380] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:405] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:419] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:435] type(data) =>
<class 'pandas.core.frame.DataFrame'>

  <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
0                                       <html><head>
1                       <title>404 Not Found</title>
2                                      </head><body>
3                                 <h1>Not Found</h1>
4  <p>The requested URL was not found on this ser...
5                                     </body></html>

[s_11_ml.py:466] time => 0.078 sec

[s_11_ml.py:495] exec_prog => done

[s_11_ml.py:530] all done
 
============================  
[s_11_ml.py:98] sklerarn-related imports => done

[s_11_ml.py:344] starting : test_S_12_Scikit (time=20210422_164941)

[s_11_ml.py:361] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:380] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:405] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:419] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:435] type(data) =>
<class 'pandas.core.frame.DataFrame'>

  <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
0                                       <html><head>
1                       <title>404 Not Found</title>
2                                      </head><body>
3                                 <h1>Not Found</h1>
4  <p>The requested URL was not found on this ser...
5                                     </body></html>

[s_11_ml.py:451] data.shape =>
(6, 1)

[s_11_ml.py:475] time => 0.031 sec

[s_11_ml.py:504] exec_prog => done

[s_11_ml.py:539] all done
 
============================  
[s_11_ml.py:98] sklerarn-related imports => done

[s_11_ml.py:344] starting : test_S_12_Scikit (time=20210422_165042)

[s_11_ml.py:361] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:380] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:405] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:419] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:435] type(data) =>
<class 'pandas.core.frame.DataFrame'>

  <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
0                                       <html><head>
1                       <title>404 Not Found</title>
2                                      </head><body>
3                                 <h1>Not Found</h1>
4  <p>The requested URL was not found on this ser...
5                                     </body></html>

[s_11_ml.py:451] data.shape =>
(6, 1)

[s_11_ml.py:459] data.columns =>
Index(['<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">'], dtype='object')

[s_11_ml.py:481] time => 0.031 sec

[s_11_ml.py:510] exec_prog => done

[s_11_ml.py:545] all done
 
============================  
[s_11_ml.py:98] sklerarn-related imports => done

[s_11_ml.py:344] starting : test_S_12_Scikit (time=20210422_165821)

[s_11_ml.py:361] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:380] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:405] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:419] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:435] type(data) =>
<class 'pandas.core.frame.DataFrame'>

  <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
0                                       <html><head>
1                       <title>404 Not Found</title>
2                                      </head><body>
3                                 <h1>Not Found</h1>
4  <p>The requested URL was not found on this ser...
5                                     </body></html>

[s_11_ml.py:451] data.shape =>
(6, 1)

[s_11_ml.py:459] data.columns =>
Index(['<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">'], dtype='object')

[s_11_ml.py:473] X_train : shape, test =>
X_train.shape :
(90, 4)

X_train.test :
 
============================  
[s_11_ml.py:98] sklerarn-related imports => done

[s_11_ml.py:344] starting : test_S_12_Scikit (time=20210422_165912)

[s_11_ml.py:361] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:380] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:405] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:419] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:435] type(data) =>
<class 'pandas.core.frame.DataFrame'>

  <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
0                                       <html><head>
1                       <title>404 Not Found</title>
2                                      </head><body>
3                                 <h1>Not Found</h1>
4  <p>The requested URL was not found on this ser...
5                                     </body></html>

[s_11_ml.py:451] data.shape =>
(6, 1)

[s_11_ml.py:459] data.columns =>
Index(['<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">'], dtype='object')

[s_11_ml.py:473] X_train, test : shape =>
X_train.shape :
(90, 4)

X_train.test :
(60, 4)

[s_11_ml.py:500] time => 0.296 sec

[s_11_ml.py:529] exec_prog => done

[s_11_ml.py:564] all done
 
============================  
[s_11_ml.py:98] sklerarn-related imports => done

[s_11_ml.py:344] starting : test_S_12_Scikit (time=20210422_170020)

[s_11_ml.py:361] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:380] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:405] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:419] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:435] type(data) =>
<class 'pandas.core.frame.DataFrame'>

  <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
0                                       <html><head>
1                       <title>404 Not Found</title>
2                                      </head><body>
3                                 <h1>Not Found</h1>
4  <p>The requested URL was not found on this ser...
5                                     </body></html>

[s_11_ml.py:451] data.shape =>
(6, 1)

[s_11_ml.py:459] data.columns =>
Index(['<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">'], dtype='object')

[s_11_ml.py:473] X_train, test : shape =>
X_train.shape :
(90, 4)

X_train.test :
(60, 4)

[s_11_ml.py:488] y_train, test : shape =>
y_train.shape :
(90,)

y_train.test :
(60,)

[s_11_ml.py:515] time => 0.140 sec

[s_11_ml.py:544] exec_prog => done

[s_11_ml.py:579] all done
 
============================  
[s_11_ml.py:98] sklerarn-related imports => done

[s_11_ml.py:344] starting : test_S_12_Scikit (time=20210422_171530)

[s_11_ml.py:361] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:380] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:405] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:419] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:473] X_train, test : shape =>
X_train.shape :
(90, 4)

X_train.test :
(60, 4)

[s_11_ml.py:488] y_train, test : shape =>
y_train.shape :
(90,)

y_train.test :
(60,)

[s_11_ml.py:518] y_pred =>
[0 1 1 0 2 1 2 0 0 2 1 0 2 1 1 0 1 1 0 0 1 1 1 0 2 1 0 0 1 2 1 2 1 2 2 0 1
 0 1 2 2 0 1 2 1 2 0 0 0 1 0 0 2 2 2 2 2 1 2 1]

[s_11_ml.py:540] time => 0.187 sec

[s_11_ml.py:569] exec_prog => done

[s_11_ml.py:604] all done
 
============================  
[s_11_ml.py:98] sklerarn-related imports => done

[s_11_ml.py:344] starting : test_S_12_Scikit (time=20210422_171923)

[s_11_ml.py:361] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:380] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:405] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:419] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:473] X_train, test : shape =>
X_train.shape :
(90, 4)

X_train.test :
(60, 4)

[s_11_ml.py:488] y_train, test : shape =>
y_train.shape :
(90,)

y_train.test :
(60,)

[s_11_ml.py:518] y_pred =>
[0 1 1 0 2 1 2 0 0 2 1 0 2 1 1 0 1 1 0 0 1 1 1 0 2 1 0 0 1 2 1 2 1 2 2 0 1
 0 1 2 2 0 1 2 1 2 0 0 0 1 0 0 2 2 2 2 2 1 2 1]

 
============================  
[s_11_ml.py:99] sklerarn-related imports => done

[s_11_ml.py:345] starting : test_S_12_Scikit (time=20210422_172207)

[s_11_ml.py:362] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:381] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:406] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:420] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:474] X_train, test : shape =>
X_train.shape :
(90, 4)

X_train.test :
(60, 4)

[s_11_ml.py:489] y_train, test : shape =>
y_train.shape :
(90,)

y_train.test :
(60,)

[s_11_ml.py:519] y_pred =>
[0 1 1 0 2 1 2 0 0 2 1 0 2 1 1 0 1 1 0 0 1 1 1 0 2 1 0 0 1 2 1 2 1 2 2 0 1
 0 1 2 2 0 1 2 1 2 0 0 0 1 0 0 2 2 2 2 2 1 2 1]

[s_11_ml.py:537] knn_model_accuracy =>
0.983333333333

[s_11_ml.py:559] time => 0.172 sec

[s_11_ml.py:588] exec_prog => done

[s_11_ml.py:623] all done
 
============================  
[s_11_ml.py:99] sklerarn-related imports => done

[s_11_ml.py:345] starting : test_S_12_Scikit (time=20210422_172436)

[s_11_ml.py:362] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:381] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:406] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:420] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:474] X_train, test : shape =>
X_train.shape :
(90, 4)

X_train.test :
(60, 4)

[s_11_ml.py:489] y_train, test : shape =>
y_train.shape :
(90,)

y_train.test :
(60,)

[s_11_ml.py:519] y_pred =>
[0 1 1 0 2 1 2 0 0 2 1 0 2 1 1 0 1 1 0 0 1 1 1 0 2 1 0 0 1 2 1 2 1 2 2 0 1
 0 1 2 2 0 1 2 1 2 0 0 0 1 0 0 2 2 2 2 2 1 2 1]

[s_11_ml.py:537] knn_model_accuracy =>
0.983333333333

[s_11_ml.py:555] preds =>
[1 2]

[s_11_ml.py:577] time => 0.156 sec

[s_11_ml.py:606] exec_prog => done

[s_11_ml.py:641] all done
 
============================  
[s_11_ml.py:99] sklerarn-related imports => done

[s_11_ml.py:345] starting : test_S_12_Scikit (time=20210422_172528)

[s_11_ml.py:362] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:381] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:406] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:420] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:474] X_train, test : shape =>
X_train.shape :
(90, 4)

X_train.test :
(60, 4)

[s_11_ml.py:489] y_train, test : shape =>
y_train.shape :
(90,)

y_train.test :
(60,)

[s_11_ml.py:519] y_pred =>
[0 1 1 0 2 1 2 0 0 2 1 0 2 1 1 0 1 1 0 0 1 1 1 0 2 1 0 0 1 2 1 2 1 2 2 0 1
 0 1 2 2 0 1 2 1 2 0 0 0 1 0 0 2 2 2 2 2 1 2 1]

[s_11_ml.py:537] knn_model_accuracy =>
0.983333333333

[s_11_ml.py:555] preds =>
sample : 
[[3, 5, 4, 2], [2, 3, 5, 4]]

preds :
[1 2]

[s_11_ml.py:583] time => 0.156 sec

[s_11_ml.py:612] exec_prog => done

[s_11_ml.py:647] all done
 
============================  
[s_11_ml.py:99] sklerarn-related imports => done

[s_11_ml.py:345] starting : test_S_12_Scikit (time=20210422_172638)

[s_11_ml.py:362] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:381] feature_names =>
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[s_11_ml.py:406] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:420] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:474] X_train, test : shape =>
X_train.shape :
(90, 4)

X_train.test :
(60, 4)

[s_11_ml.py:489] y_train, test : shape =>
y_train.shape :
(90,)

y_train.test :
(60,)

[s_11_ml.py:519] y_pred =>
[0 1 1 0 2 1 2 0 0 2 1 0 2 1 1 0 1 1 0 0 1 1 1 0 2 1 0 0 1 2 1 2 1 2 2 0 1
 0 1 2 2 0 1 2 1 2 0 0 0 1 0 0 2 2 2 2 2 1 2 1]

[s_11_ml.py:537] knn_model_accuracy =>
0.983333333333

[s_11_ml.py:556] prediction =>
sample : 
[[3, 5, 4, 2], [2, 3, 5, 4]]

preds :
[1 2]

pred_species :
['versicolor', 'virginica']

[s_11_ml.py:588] time => 0.468 sec

[s_11_ml.py:617] exec_prog => done

[s_11_ml.py:652] all done
 
============================  
[s_11_ml.py:104] sklerarn-related imports => done

[s_11_ml.py:350] starting : test_S_12_Scikit (time=20210422_175554)

[s_11_ml.py:367] load_iris => done
type(iris) =>  <class 'sklearn.utils.Bunch'>
[s_11_ml.py:386] feature_names, targets =>
feature_names :
['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

target_names :
['setosa' 'versicolor' 'virginica']

[s_11_ml.py:416] type(X) =>
<class 'numpy.ndarray'>

[s_11_ml.py:430] X[:5] =>
[[ 5.1  3.5  1.4  0.2]
 [ 4.9  3.   1.4  0.2]
 [ 4.7  3.2  1.3  0.2]
 [ 4.6  3.1  1.5  0.2]
 [ 5.   3.6  1.4  0.2]]

[s_11_ml.py:484] X_train, test : shape =>
X_train.shape :
(90, 4)

X_train.test :
(60, 4)

[s_11_ml.py:499] y_train, test : shape =>
y_train.shape :
(90,)

y_train.test :
(60,)

[s_11_ml.py:529] y_pred =>
[0 1 1 0 2 1 2 0 0 2 1 0 2 1 1 0 1 1 0 0 1 1 1 0 2 1 0 0 1 2 1 2 1 2 2 0 1
 0 1 2 2 0 1 2 1 2 0 0 0 1 0 0 2 2 2 2 2 1 2 1]

[s_11_ml.py:547] knn_model_accuracy =>
0.983333333333

[s_11_ml.py:566] prediction =>
sample : 
[[3, 5, 4, 2], [2, 3, 5, 4]]

preds :
[1 2]

pred_species :
['versicolor', 'virginica']

[s_11_ml.py:595] joblib.dump => comp.
[s_11_ml.py:615] time => 0.203 sec

[s_11_ml.py:644] exec_prog => done

[s_11_ml.py:679] all done
